<?php

class SqlCommand extends AbstractCommand
{
    protected $sql = '';

    public function run(array $args)
    {
        parent::run($args);
        $this->createSql();
        $this->execute();
    }

    protected function createSql()
    {
        $name = $this->annotation->getClass()->Entity;
        $sql = '';
        if ($this->getOption('force')) {
            $sql = "DROP TABLE IF EXISTS `$name`;\n";
        }

        $sql .= "CREATE TABLE `$name` (\n";
        $properties = array();
        foreach ($this->properties as $property => $annotation) {
            $properties[] = "\t`$property` {$this->getType($annotation)} {$this->getNullable($annotation)}";
        }
        $sql .= implode(",\n", $properties) . NL;
        $sql .= ");\n";

        if ($this->getPrimaryKey()) {
            $sql .= "ALTER TABLE `$name` ADD PRIMARY KEY (`{$this->getPrimaryKey()}`);\n";
            if ($this->isAutoGenerated($this->getPrimaryKey())) {
                $sql .= "ALTER TABLE `$name` MODIFY `{$this->getPrimaryKey()}` INT(11) NOT NULL AUTO_INCREMENT;\n";
            }
        }

        $this->sql = $sql;
    }

    protected function execute()
    {
        $name = $this->annotation->getClass()->Entity;
        $db = Database::factory();
        $success = $db->query($this->sql);
        if ($success === false) {
            echo "Erro ao criar a tabela $name.\n";
            exit(1);
        }
        echo "Tabela $name criada.\n";
    }

    protected function getType($property)
    {
        $type = strtolower($property->Column->Type);
        $length = null;
        if (isset($property->Column->Length)) {
            $length = strtolower($property->Column->Length);
        }

        $types = array(
            'boolean' => 'INT(' . ($length ? $length : 1) . ')',
            'int' => 'INT(' . ($length ? $length : 11) . ')',
            'double' => 'FLOAT(' . ($length ? $length : 2) . ')',
            'float' => 'FLOAT(' . ($length ? $length : 2) . ')',
            'string' => 'VARCHAR(' . ($length ? $length : 128) . ')',
            'date' => 'DATE',
            'datetime' => 'DATETIME',
        );
        return $types[$type];
    }

    protected function getNullable($property)
    {
        if (isset($property->Required)) {
            return 'NOT NULL';
        }

        return 'NULL';
    }
}
