<?php

require_once 'crud/raelgc/view/Template.php';

class ViewCommand extends AbstractCommand
{
    public function run(array $args)
    {
        parent::run($args);
        $this->createView('index');
        $this->createView('add');
    }

    protected function createView($type)
    {
        $model = $this->model;
        $file = 'app/views/' . Inflector::uncamelize($model) . '/' . $type . '.php';

        if (file_exists($file) && !$this->getOption('force')) {
            echo "Controller $name ja existe. Use --force para sobrescreve-lo.\n";
            exit(1);
        }

        $title = $model;
        if (isset($this->annotation->getClass()->Title)) {
            $title = $this->annotation->getClass()->Title;
        }

        $vars = array(
            '__MODEL__' => $model,
            '__model__' => Inflector::uncamelize($model, '_'),
            '__CONTROLLER__' => $name,
            '__TITLE__' => $title,
        );

        $content = $this->loadTemplate($type);
        foreach ($vars as $key => $value) {
            $content = str_replace($key, $value, $content);
        }

        $directory = dirname($file);
        if (!is_dir($directory)) {
            if (!mkdir($directory, 0777)) {
                echo "Erro ao criar o diretorio {$directory}.\n";
                exit;
            }
            echo "Diretorio {$directory} criado.\n";
        }

        $success = file_put_contents($file, $content);

        if ($success === false) {
            echo "Erro ao criar o arquivo $file.\n";
            exit(1);
        }
        echo "Arquivo $file criado.\n";
    }

    protected function loadTemplate($type)
    {
        $tpl = new raelgc\view\Template('crud/template/view/' . $type . '.tpl');

        if ($type == 'index') {
            foreach ($this->properties as $property => $annotation) {
                if (!$this->isAutoGenerated($property) && !$this->isNotRenderable($property)) {
                    $label = $property;
                    if (isset($annotation->Label)) {
                        $label = $annotation->Label;
                    }
                    $tpl->Label = $label;
                    $tpl->Name = $property;
                    $tpl->Key = $this->getPrimaryKey();
                    $tpl->block('BLOCK_COLUMNS');
                    $tpl->block('BLOCK_FIELDS');
                }
            }
        } else {
            foreach ($this->properties as $property => $annotation) {
                if (!$this->isAutoGenerated($property) && !$this->isNotRenderable($property)) {
                    $label = $property;
                    if (isset($annotation->Label)) {
                        $label = $annotation->Label;
                    }
                    $tpl->CSS = $this->getCSS($annotation);
                    $tpl->Label = $label;
                    $tpl->Name = $property;
                    $tpl->Required = $this->getRequired($annotation);
                    $tpl->block('BLOCK_FIELDS');
                }
            }
        }
        return $tpl->parse();
    }

    protected function getCSS($property)
    {
        $type = strtolower($property->Column->Type);
        $classes = array(
            'boolean' => '',
            'int' => 'number',
            'double' => 'money',
            'float' => 'money',
            'string' => '',
            'date' => 'date',
            'datetime' => 'datetime',
        );
        return $classes[$type];
    }

    protected function getRequired($property)
    {
        if (isset($property->Required)) {
            return 'true';
        }
        return 'false';
    }
}
