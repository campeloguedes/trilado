<?php

abstract class AbstractCommand
{
    protected $args = array();
    protected $options = array();
    protected $annotation;
    protected $properties = array();
    protected $primaryKey;
    protected $model;

    public function run(array $args)
    {
        $this->args = $args;
        $this->proccessOptions();
        $this->model = $args[2];
        $this->extractAnnotation();
    }

    protected function proccessOptions()
    {
        foreach ($this->args as $arg) {
            if (0 === strpos($arg, '--')) {
                $option = str_replace('--', '', $arg);
                if (trim($option)) {
                    $this->options[] = $option;
                }
            }
        }
    }

    protected function getOption($option)
    {
        return in_array($option, $this->options);
    }

    protected function extractAnnotation()
    {
        $model = $this->model;
        $instance = new $model();
        $this->annotation = Annotation::get($model);
        $this->properties = $this->annotation->getProperties();

        if (!property_exists($this->annotation->getClass(), 'Entity')) {
            throw new DatabaseException("A classe '" . $class . "' não é uma entidade");
        }
    }

    protected function getPrimaryKey()
    {
        if ($this->primaryKey) {
            return $this->primaryKey;
        }

        foreach ($this->properties as $property => $annotation) {
            if (isset($annotation->Column->Key)) {
                return $this->primaryKey = $property;
            }
        }
        return $this->primaryKey;
    }

    protected function isAutoGenerated($property)
    {
        if (isset($this->properties[$property])) {
            if (isset($this->properties[$property]->AutoGenerated)) {
                return true;
            }

        }
        return false;
    }

    protected function isNotRenderable($property)
    {
        if (isset($this->properties[$property])) {
            if (isset($this->properties[$property]->NotRenderable)) {
                return true;
            }

        }
        return false;
    }

    protected function writeln($text)
    {
        echo $text . "\n";
    }

    protected function error($text)
    {
        echo "[41m" . $text . "[0m\n";
    }
}
